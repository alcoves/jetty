import fs from 'fs-extra'
import mime from 'mime-types'
import update from 'update-electron-app'
import { app, BrowserWindow, ipcMain, dialog } from 'electron'

try {
  update()
} catch (error) {
  console.error('error', error)
}

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit()
}

declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: any

let mainWindow

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 1000,
    width: 1400,
    frame: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  })

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  // Open the DevTools.
  if (process.env.NODE_ENV !== 'production') {
    mainWindow.webContents.openDevTools()
  }
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow)

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

// IPC

ipcMain.on('titleBarAction', (_, arg) => {
  if (arg === 'maximize') {
    if (mainWindow.isMaximized()) {
      mainWindow.restore()
    } else {
      mainWindow.maximize()
    }
  }

  if (arg === 'minimize') mainWindow.minimize()
  if (arg === 'quit') app.quit()
})

ipcMain.on('getApplicationVersion', event => {
  event.sender.send('getApplicationVersion', { version: app.getVersion() })
})

ipcMain.on('selectAvatarFile', event => {
  dialog
    .showOpenDialog({
      filters: [
        {
          name: 'Images',
          extensions: ['png', 'jpg', 'jpeg', 'webp'],
        },
      ],
      properties: ['openFile'],
    })
    .then(result => {
      const stats = fs.statSync(result.filePaths[0])
      fs.readFile(result.filePaths[0], { encoding: 'base64' })
        .then(file => {
          event.sender.send('selectAvatarFile', {
            data: file,
            size: stats.size,
            type: mime.lookup(result.filePaths[0]),
          })
        })
        .catch(err => {
          console.error('Unable to read file', err)
        })
    })
    .catch(error => {
      console.error(error)
    })
})
